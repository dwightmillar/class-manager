"use strict";(self.webpackChunkclass_manager=self.webpackChunkclass_manager||[]).push([[4],{4:(e,t,a)=>{a.r(t),a.d(t,{default:()=>h});var s=a(123),n=a(466),l=a(387),c=a(638),r=a(374),i=a(429);function o(e){let{classes:t,setClasses:a}=e;return n.createElement("nav",null,n.createElement("ul",{id:"tab-list",className:"nav nav-tabs"},t?n.createElement(n.Fragment,null,n.createElement(d,(0,s.Z)({},e,{classes:t})),n.createElement(m,{key:"tab-0",setClasses:a})):null))}function d(e){return e.classes.map(((t,a,l)=>n.createElement(u,(0,s.Z)({},e,{data:t,key:"tab-"+(l.length-a)}))))}function u({data:e}){let{id:t,title:a}=e,s="/"+t;return n.createElement("li",{className:"nav-item"},n.createElement(i.OL,{to:s,className:"nav-link",activeClassName:"nav-link active"},a))}function m({setClasses:e}){const[t,a]=(0,n.useState)({placeholder:"+",className:"addtab",value:""});return n.createElement("li",{className:"nav-item"},n.createElement("form",{className:"fullheight",onSubmit:s=>{s.preventDefault(),r.Z.class.add(t.value).then((({data:s})=>{e({data:{title:t.value,id:s.insertId}}),a({...t,value:""})})).catch((e=>console.error(e)))}},n.createElement("input",{id:"add-class",type:"text",style:{display:"inline-block",border:"none",cursor:"pointer",padding:"0.1em 0 0 1em",height:"40px",width:"fit-content"},className:t.className,placeholder:t.placeholder,value:t.value,onChange:({currentTarget:e})=>{a({...t,value:e.value})},onFocus:()=>{a({...t,placeholder:"Enter Class",className:"nav-link"})},onBlur:()=>{a({...t,placeholder:"+",className:"addtab"})}})))}const p=(0,n.lazy)((()=>a.e(928).then(a.bind(a,928)))),f=(0,n.lazy)((()=>a.e(357).then(a.bind(a,357)))),h=(0,l.EN)((function(e){const[t,a]=(0,n.useState)({mounted:!1,classes:null,modal:null});function i({data:e}){if(null===t.classes||e.prototype===Array.prototype)return a({...t,classes:e});const s=t.classes.findIndex((t=>t.id==e.id));-1===s?function(e){let s=t.classes;s.push(e),c.Z.push("/"+e.id),a({...t,classes:s})}(e):function(e,s){let n=t.classes[s-1]?t.classes[s-1].id:"welcome",l=t.classes.filter((t=>t.id!=e));c.Z.replace("/"+n),a({...t,classes:l})}(e.id,s)}function d(e=null){a({...t,modal:e})}return(0,n.useEffect)((()=>{t.mounted||a({...t,mounted:!0})}),[]),(0,n.useEffect)((()=>{t.mounted&&r.Z.class.load().then(i).catch((e=>console.error(e)))}),[t.mounted]),(0,n.useEffect)((()=>{t.classes&&(t.classes.length?void 0===t.classes.find((({id:t})=>t==e.location.pathname.split("/")[1]))&&c.Z.replace("/".concat(t.classes[0].id)):c.Z.replace("/welcome"))}),[t.classes]),n.createElement("div",{id:"app"},t.modal,n.createElement(o,(0,s.Z)({},e,{classes:t.classes,setClasses:i})),n.createElement(l.rs,null,n.createElement(l.AW,{exact:!0,path:"/",render:()=>n.createElement(l.l_,{to:"/ "})}),n.createElement(l.AW,{exact:!0,path:"/welcome",component:p}),n.createElement(l.AW,{path:"/:classId",render:e=>{var a;return n.createElement(n.Suspense,{fallback:n.createElement("div",null,"Loading...")},n.createElement(f,(0,s.Z)({},e,{title:t.classes?null===(a=t.classes.find((({id:t})=>t==e.match.params.classId)))||void 0===a?void 0:a.title:null,setClasses:i,toggleModal:d})))}})))}))},374:(e,t,a)=>{async function s(e="GET",t,a={}){try{if(!t||t.prototype===Request.prototype&&!t.url)throw Error("Must define URL");let{headers:s,body:n,credentials:l,cache:c,redirect:r,referrer:i,referrerPolicy:o,integrity:d,keepalive:u,signal:m}=a;a.method=e,"GET"===e||"HEAD"===e?a.body=void 0:"string"!=typeof n&&(a.body=JSON.stringify(n)),s||(s=new Headers,s.set("Accept","application/json"),a.body&&s.set("Content-Type","application/json"),a.headers=s);let p=await fetch(t,a);switch(String(p.status)[0]){case"4":throw Error("Bad request");case"5":throw Error("Server unavailable")}const f=p.headers.get("content-type");if(!f||!f.includes("application/json"))throw new TypeError("Response not in JSON");return{...await p.json(),success:!0}}catch(e){return console.error("Fetch failed:",e),{success:!1}}}a.d(t,{Z:()=>n});const n={class:{load:async function(){return await s("GET","/api/classes")},add:async function(e){let t={name:e};return await s("POST","/api/classes",{body:t})},delete:async function(e){return await s("DELETE","/api/classes",{body:{id:e}})}},student:{load:async function(e){return await s("GET","/api/students?classId=".concat(e))},add:async function(e,t){let a={name:e,classId:t};return await s("POST","/api/students",{body:a})},delete:async function(e){const t={id:e};return await s("DELETE","/api/students",{body:t})}},assignment:{load:async function(e){return await s("GET","/api/assignments?classId=".concat(e))},add:async function(e){let t={scores:e};return await s("POST","/api/assignments",{body:t})},update:async function(e){let t={scores:e};return await s("PATCH","/api/assignments",{body:t})}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,